Outputs:
  OriginalImagesS3Bucket:
    Description: S3 bucket where original images are stored
    Value: image-sotogubeng-com
  ImageDeliveryDomain:
    Description: Domain name of image delivery
    Value:
      Fn::GetAtt:
        - imageDeliveryDistribution8CA0B45D
        - DomainName
Resources:
  s3transformedimagebucket6D81D5CB:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ImgTransformationStack/s3-transformed-image-bucket/Resource
  s3transformedimagebucketPolicyFB92EE5E:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: s3transformedimagebucket6D81D5CB
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - s3transformedimagebucket6D81D5CB
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - s3transformedimagebucket6D81D5CB
                        - Arn
                    - /*
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt:
                  - imageDeliveryDistributionOrigin1S3OriginC00A52F5
                  - S3CanonicalUserId
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - s3transformedimagebucket6D81D5CB
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ImgTransformationStack/s3-transformed-image-bucket/Policy/Resource
  s3transformedimagebucketAutoDeleteObjectsCustomResource66B8DB81:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: s3transformedimagebucket6D81D5CB
    DependsOn:
      - s3transformedimagebucketPolicyFB92EE5E
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ImgTransformationStack/s3-transformed-image-bucket/AutoDeleteObjectsCustomResource/Default
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImgTransformationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 483ae06ed27ef8ca76e011264d772420593a6cfe8544759c306ef3b98c9e25be.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs16.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: s3transformedimagebucket6D81D5CB
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: ImgTransformationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: /home/fatoni/Repos/Codes/popbela/image-optimization.popbela.com/node_modules/aws-cdk-lib/aws-s3/lib/auto-delete-objects-handler
      aws:asset:property: Code
  CloudFrontOriginAccessIdentity04EB66DA:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Allows CloudFront to reach the bucket
    Metadata:
      aws:cdk:path: ImgTransformationStack/CloudFrontOriginAccessIdentity/Resource
  imageoptimizationServiceRoleB17BF31F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImgTransformationStack/image-optimization/ServiceRole/Resource
  imageoptimization4C49F079:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: eb47deaedda7b18ca6add978cf67563728cab013b59310ce3b3c715f0490e09c.zip
      Role:
        Fn::GetAtt:
          - imageoptimizationServiceRoleB17BF31F
          - Arn
      Environment:
        Variables:
          originalImageBucketName: image-sotogubeng-com
          transformedImageCacheTTL: max-age=31622400
          secretKey: dde47533b2b2ca349a679ec407902134
          logTiming: "false"
          transformedImageBucketName:
            Ref: s3transformedimagebucket6D81D5CB
      Handler: index.handler
      MemorySize: 1500
      Runtime: nodejs16.x
      Timeout: 60
    DependsOn:
      - imageoptimizationServiceRoleB17BF31F
    Metadata:
      aws:cdk:path: ImgTransformationStack/image-optimization/Resource
      aws:asset:path: /home/fatoni/Repos/Codes/popbela/image-optimization.popbela.com/functions/image-processing
      aws:asset:is-bundled: false
      aws:asset:property: Code
  imageoptimizationLogRetentionFAE2ECE2:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: imageoptimization4C49F079
      RetentionInDays: 1
    Metadata:
      aws:cdk:path: ImgTransformationStack/image-optimization/LogRetention/Resource
  imageoptimizationFunctionUrlB69FA2C7:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn:
        Fn::GetAtt:
          - imageoptimization4C49F079
          - Arn
    Metadata:
      aws:cdk:path: ImgTransformationStack/image-optimization/FunctionUrl/Resource
  imageoptimizationinvokefunctionurlE8A29AF5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName:
        Fn::GetAtt:
          - imageoptimization4C49F079
          - Arn
      Principal: "*"
      FunctionUrlAuthType: NONE
    Metadata:
      aws:cdk:path: ImgTransformationStack/image-optimization/invoke-function-url
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 558dc75fbdc793c8e2f64f85d2d7ed2cb820c727ec7e9b08666ad1af0103992e.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: ImgTransformationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: /home/fatoni/Repos/Codes/popbela/image-optimization.popbela.com/node_modules/aws-cdk-lib/aws-logs/lib/log-retention-provider
      aws:asset:is-bundled: false
      aws:asset:property: Code
  customResourceMyProviderframeworkonEventServiceRoleC33AFC6A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImgTransformationStack/customResource/MyProvider/framework-onEvent/ServiceRole/Resource
  customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474
      Roles:
        - Ref: customResourceMyProviderframeworkonEventServiceRoleC33AFC6A
    Metadata:
      aws:cdk:path: ImgTransformationStack/customResource/MyProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource
  customResourceMyProviderframeworkonEventB3B3EFCC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: a25ad9c0d11729e2a901249c21b3095a071174c6fc98296269154dcebbb42a08.zip
      Role:
        Fn::GetAtt:
          - customResourceMyProviderframeworkonEventServiceRoleC33AFC6A
          - Arn
      Description: AWS CDK resource provider framework - onEvent (ImgTransformationStack/customResource/MyProvider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN:
            Fn::GetAtt:
              - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C
              - Arn
      Handler: framework.onEvent
      Runtime: nodejs16.x
      Timeout: 900
    DependsOn:
      - customResourceMyProviderframeworkonEventServiceRoleDefaultPolicyB8BF2474
      - customResourceMyProviderframeworkonEventServiceRoleC33AFC6A
    Metadata:
      aws:cdk:path: ImgTransformationStack/customResource/MyProvider/framework-onEvent/Resource
      aws:asset:path: /home/fatoni/Repos/Codes/popbela/image-optimization.popbela.com/node_modules/aws-cdk-lib/custom-resources/lib/provider-framework/runtime
      aws:asset:is-bundled: false
      aws:asset:property: Code
  customResourceMyProviderframeworkonEventLogRetentionF00436C8:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: customResourceMyProviderframeworkonEventB3B3EFCC
      RetentionInDays: 1
    Metadata:
      aws:cdk:path: ImgTransformationStack/customResource/MyProvider/framework-onEvent/LogRetention/Resource
  customResourceResource14CCAC0E2:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - customResourceMyProviderframeworkonEventB3B3EFCC
          - Arn
      Url:
        Fn::GetAtt:
          - imageoptimizationFunctionUrlB69FA2C7
          - FunctionUrl
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ImgTransformationStack/customResource/Resource1/Default
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/ServiceRole/Resource
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: f807064fe516c5a26909bdda25af89cb4e09cc76786d6b54aadc8bafd5f415a2.zip
      Role:
        Fn::GetAtt:
          - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04
          - Arn
      Handler: index.on_event
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04
    Metadata:
      aws:cdk:path: ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/Resource
      aws:asset:path: /home/fatoni/Repos/Codes/popbela/image-optimization.popbela.com/functions/custom-resource
      aws:asset:is-bundled: false
      aws:asset:property: Code
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcLogRetentionB0B969CA:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C
      RetentionInDays: 1
    Metadata:
      aws:cdk:path: ImgTransformationStack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/LogRetention/Resource
  readwritebucketpolicyDCD4CB5F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::image-sotogubeng-com/*
          - Action: s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: s3transformedimagebucket6D81D5CB
                  - /*
        Version: "2012-10-17"
      PolicyName: readwritebucketpolicyDCD4CB5F
      Roles:
        - Ref: imageoptimizationServiceRoleB17BF31F
    Metadata:
      aws:cdk:path: ImgTransformationStack/read-write-bucket-policy/Resource
  urlRewriteD6DE1501:
    Type: AWS::CloudFront::Function
    Properties:
      Name: urlRewriteFunctionc8686f3674591d3fdb088e2d68d00eeeb616bdfdab
      AutoPublish: true
      FunctionCode: |
        // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
        // SPDX-License-Identifier: MIT-0

        function handler(event) {
            var request = event.request;
            var originalImagePath = request.uri;
            //  validate, process and normalize the requested operations in query parameters
            var normalizedOperations = {};
            if (request.querystring) {
                Object.keys(request.querystring).forEach(operation => {
                    switch (operation.toLowerCase()) {
                        case 'format': 
                            var SUPPORTED_FORMATS = ['auto', 'jpeg', 'webp', 'avif', 'png', 'svg', 'gif'];
                            if (request.querystring[operation]['value'] && SUPPORTED_FORMATS.includes(request.querystring[operation]['value'].toLowerCase())) {
                                var format = request.querystring[operation]['value'].toLowerCase(); // normalize to lowercase
                                if (format === 'auto') {
                                    format = 'jpeg';
                                    if (request.headers['accept']) {
                                        if (request.headers['accept'].value.includes("avif")) {
                                            format = 'avif';
                                        } else if (request.headers['accept'].value.includes("webp")) {
                                            format = 'webp';
                                        } 
                                    }
                                }
                                normalizedOperations['format'] = format;
                            }
                            break;
                        case 'width':
                            if (request.querystring[operation]['value']) {
                                var width = parseInt(request.querystring[operation]['value']);
                                if (!isNaN(width) && (width > 0)) {
                                    // you can protect the Lambda function by setting a max value, e.g. if (width > 4000) width = 4000;
                                    normalizedOperations['width'] = width.toString();
                                }
                            }
                            break;
                        case 'height':
                            if (request.querystring[operation]['value']) {
                                var height = parseInt(request.querystring[operation]['value']);
                                if (!isNaN(height) && (height > 0)) {
                                    // you can protect the Lambda function by setting a max value, e.g. if (height > 4000) height = 4000;
                                    normalizedOperations['height'] = height.toString();
                                }
                            }
                            break;
                        case 'quality':
                            if (request.querystring[operation]['value']) {
                                var quality = parseInt(request.querystring[operation]['value']);
                                if (!isNaN(quality) && (quality > 0)) {
                                    if (quality > 100) quality = 100;
                                    normalizedOperations['quality'] = quality.toString();
                                }
                            }
                            break;
                        default: break;
                    }
                });
                //rewrite the path to normalized version if valid operations are found
                if (Object.keys(normalizedOperations).length > 0) {
                    // put them in order
                    var normalizedOperationsArray = [];
                    if (normalizedOperations.format) normalizedOperationsArray.push('format='+normalizedOperations.format);
                    if (normalizedOperations.quality) normalizedOperationsArray.push('quality='+normalizedOperations.quality);
                    if (normalizedOperations.width) normalizedOperationsArray.push('width='+normalizedOperations.width);
                    if (normalizedOperations.height) normalizedOperationsArray.push('height='+normalizedOperations.height);
                    request.uri = originalImagePath + '/' + normalizedOperationsArray.join(',');     
                } else {
                    // If no valid operation is found, flag the request with /original path suffix
                    request.uri = originalImagePath + '/original';     
                }

            } else {
                // If no query strings are found, flag the request with /original path suffix
                request.uri = originalImagePath + '/original'; 
            }
            // remove query strings
            request['querystring'] = {};
            return request;
        }
      FunctionConfig:
        Comment: urlRewriteFunctionc8686f3674591d3fdb088e2d68d00eeeb616bdfdab
        Runtime: cloudfront-js-1.0
    Metadata:
      aws:cdk:path: ImgTransformationStack/urlRewrite/Resource
  ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab46036099:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 30
        Name:
          Fn::Join:
            - ""
            - - ImgTransformationStackImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab56294ACF-
              - Ref: AWS::Region
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
    Metadata:
      aws:cdk:path: ImgTransformationStack/ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab/Resource
  ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab4B9251C7:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - "*"
          AccessControlAllowMethods:
            Items:
              - GET
          AccessControlAllowOrigins:
            Items:
              - "*"
          AccessControlMaxAgeSec: 600
          OriginOverride: false
        CustomHeadersConfig:
          Items:
            - Header: x-aws-image-optimization
              Override: true
              Value: v1.0
            - Header: vary
              Override: true
              Value: accept
        Name: ImageResponsePolicy
    Metadata:
      aws:cdk:path: ImgTransformationStack/ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab/Resource
  imageDeliveryDistributionOrigin1S3OriginC00A52F5:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Identity for ImgTransformationStackimageDeliveryDistributionOrigin13D122748
    Metadata:
      aws:cdk:path: ImgTransformationStack/imageDeliveryDistribution/Origin1/S3Origin/Resource
  imageDeliveryDistribution8CA0B45D:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - image.sotogubeng.com
          - cdn.sotogubeng.com
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId:
              Ref: ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab46036099
            Compress: true
            PathPattern: /*/*/*.svg
            TargetOriginId: ImgTransformationStackimageDeliveryDistributionOrigin39F2D9D62
            ViewerProtocolPolicy: redirect-to-https
        Comment: image optimization - image delivery
        DefaultCacheBehavior:
          CachePolicyId:
            Ref: ImageCachePolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab46036099
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN:
                Fn::GetAtt:
                  - urlRewriteD6DE1501
                  - FunctionARN
          ResponseHeadersPolicyId:
            Ref: ResponseHeadersPolicyc8686f3674591d3fdb088e2d68d00eeeb616bdfdab4B9251C7
          TargetOriginId: ImgTransformationStackimageDeliveryDistributionOriginGroup13DB43B07
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        OriginGroups:
          Items:
            - FailoverCriteria:
                StatusCodes:
                  Items:
                    - 403
                  Quantity: 1
              Id: ImgTransformationStackimageDeliveryDistributionOriginGroup13DB43B07
              Members:
                Items:
                  - OriginId: ImgTransformationStackimageDeliveryDistributionOrigin13D122748
                  - OriginId: ImgTransformationStackimageDeliveryDistributionOrigin214EA4308
                Quantity: 2
          Quantity: 1
        Origins:
          - DomainName:
              Fn::GetAtt:
                - s3transformedimagebucket6D81D5CB
                - RegionalDomainName
            Id: ImgTransformationStackimageDeliveryDistributionOrigin13D122748
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - origin-access-identity/cloudfront/
                    - Ref: imageDeliveryDistributionOrigin1S3OriginC00A52F5
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName:
              Fn::GetAtt:
                - customResourceResource14CCAC0E2
                - HostName
            Id: ImgTransformationStackimageDeliveryDistributionOrigin214EA4308
            OriginCustomHeaders:
              - HeaderName: x-origin-secret-header
                HeaderValue: dde47533b2b2ca349a679ec407902134
          - DomainName:
              Fn::Join:
                - ""
                - - image-sotogubeng-com.s3.
                  - Ref: AWS::Region
                  - "."
                  - Ref: AWS::URLSuffix
            Id: ImgTransformationStackimageDeliveryDistributionOrigin39F2D9D62
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - origin-access-identity/cloudfront/
                    - Ref: CloudFrontOriginAccessIdentity04EB66DA
        ViewerCertificate:
          AcmCertificateArn:
            Ref: certificateUsEastArnParameter
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
    Metadata:
      aws:cdk:path: ImgTransformationStack/imageDeliveryDistribution/Resource
  AliasRecord851000D2:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: image.sotogubeng.com.
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - imageDeliveryDistribution8CA0B45D
            - DomainName
        HostedZoneId:
          Fn::FindInMap:
            - AWSCloudFrontPartitionHostedZoneIdMap
            - Ref: AWS::Partition
            - zoneId
      HostedZoneId: Z0038615LKFBRBB1OMPT
    Metadata:
      aws:cdk:path: ImgTransformationStack/AliasRecord/Resource
  CdnAliasRecord144192E1:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: cdn.sotogubeng.com.
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - imageDeliveryDistribution8CA0B45D
            - DomainName
        HostedZoneId:
          Fn::FindInMap:
            - AWSCloudFrontPartitionHostedZoneIdMap
            - Ref: AWS::Partition
            - zoneId
      HostedZoneId: Z0038615LKFBRBB1OMPT
    Metadata:
      aws:cdk:path: ImgTransformationStack/CdnAliasRecord/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21STW/CMAz9LbuHTIxt2hWY0CZtAhXtjEJiOkMaozhhmqr+9yVtoUzi5Pfs5/grD/LhUY7v1A+PtDmMLG5lvQ5KH0RybWqeyHoW9QHCTDGIDor5zvWoMyuyqH8Hd8cboS1Fs/PkgqyXHkt0U62B+d2ACxjajHnWLLLmpmIRnQ5ILksHrPQ3DEWvaQF8JMfwBsqA50F0O/CKHDxu47nENW+EVdXWKFnfbOIMvrzN/t6swFfInAVrdKWFQJeURqCqZF2QhbajbIcGz0vjyUYxQ2A5zUZYKll+UFlAyDtJD3uKAZ7SZaYFaPKmGy+jNYSmyXQZwzGmQ0UOVKXRKXoN/Rp6/C+08nTCtBfR1kwfIF2iFBexbsUb33OWF31uXHlVpeZa8qmOx5yaz0LOYDe3IwNyz/en8YscP6f/tmfEkY9pngpk0dk/qfPzh4sCAAA=
    Metadata:
      aws:cdk:path: ImgTransformationStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  certificateUsEastArnParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /idn/popbela/certificateUsEastArn
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Mappings:
  AWSCloudFrontPartitionHostedZoneIdMap:
    aws:
      zoneId: Z2FDTNDATAQYW2
    aws-cn:
      zoneId: Z3RFFRIM2A3IF5
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

